== Getting Started

1. Make sure you have rails version 4. Type "rails -v" to make sure.
2. From this project directory, do "bundle install --without production"
3. To start the server "rails server".
4. Navigate your browser to localhost:3000.


== Setting up with Git

1. Instantiate this directory as a git repository with "git init".
2. Go to github.com, create a new repository, then follow instructions on how to add a remote repository that links to github.
3. Remember, you have to "git add" changes to ready it for a commit, then "git commit" to commit those changes locally, then "git push origin master" to push it to the remote "origin" repository, which is the previously created github.com repository.

== Deploying to Heroku

1. Download the Heroku Toolbelt.
2. Go to Heroku.com and register.
3. Issue "heroku login" to authenticate, with the credentials from previous step. Make sure it's a git repository, by issuing "git init", and also "git add", "git commit" your files.
4. Then "heroku create" to create this app on heroku. This command also adds a "heroku" remote repository that you can push to.
5. To deploy, issue "git push heroku master".
6. You may need to run migrations on heroku afterwards, with "heroku run rake db:migrate".
7. Other helpful heroku commands:
  - heroku logs
  - heroku logs -t
  - heroku rename
  - heroku restart
  - heroku run console
  - heroku help


#--------------------- ANSWERS TO WEEK 1 QUIZ 

1)Why do they call it a relational database?
A: Due to the tables within the database having associations to each other

2)What is SQL?
A: SQL(Structured Query Language) and it is used to manage operations of a relational database.

3)There are two predominant views into a relational database. What are they, and how are they different?
A: Data and Schema. Data view displays like a spreadsheet, Schema view shows us the column names and the value type of each column.

4)In a table, what do we call the column that serves as the main identifier for a row of data? We're looking for the general database term, not the column name.
A: Primary Key

5)What is a foreign key, and how is it used?
A: FK is the identifier that connects an association with the models involved. The FK is always on the "many" side and is always in an integer type.

6)At a high level, describe the ActiveRecord pattern. This has nothing to do with Rails, but the actual pattern that ActiveRecord uses to perform its ORM duties.
A: ActiveRecord is a way to access the database. A database table is related to a class. An object of that class is created as a row in the table. This object can have different attribute values shown as the columns in the table. We can create, retrieve,
update, and delete the object instances by altering the database table.

7)If there's an ActiveRecord model called "CrazyMonkey", what should the table name be?
A:"CrazyMonkey".tableize => crazy_monkeys

8)If I'm building a 1:M association between Project and Issue, what will the model associations and foreign key be?
A:  class Project < ActiveRecord::Base
      has_many :issues, foreign_key: :project_id
    end
    
    class Issue < ActiveRecord::Base
      belongs_to :project, foreign_key: :project_id
    end

project_id => fk

9)Given this code

class Zoo < ActiveRecord::Base
  has_many :animals
end

What do you expect the other model to be and what does database schema look like?

class Animal < ActiveRecord::Base
  belongs_to :zoo, foreign_key: :zoo_id
end

schema would contain zoos table, animals table, & fk would be :zoo_id

What are the methods that are now available to a zoo to call related to animals?
zoo.animals
zoo.animals.first
zoo.animals.each do |animal|
  #SOME_ACTION
end

How do I create an animal called "jumpster" in a zoo called "San Diego Zoo"?
Go into rails console and enter the following in different commands
zoo = Zoo.create(name: 'San Diego Zoo')
jumpster = Animal.create(name: "jumpster", zoo_id: 1)

10) What is mass assignment? What's the non-mass assignment way of setting values?
A: Mass assignment allows us to assign multiple values to attributes with only a single assignment operator

Mass Assignment:
$Post.new(title: 'My first post', topic: 'Life')
$Post.create(title: 'My first post', topic: 'Life')

Non-Mass Assignment:
post = Post.new
post.title = 'My first post'
post.topic = 'Life'

11)What does this code do? Animal.first
A: This will return the first row of data for the first Animal instance object in the animals table.

12)If I have a table called "animals" with columns called "name", and a model called Animal, how do I instantiate an animal object with name set to "Joe". Which methods makes sure it saves to the database?
A: 
$ animal = Animal.create(name: 'Joe') #=> Using "create" will hit the database and automatically saves it.
vs.
$ animal = Animal.new(name: 'Joe') #=> Using "new" will require you to use the save method afterwards to save it to the database.
$ animal.save

13)How does a M:M association work at the database level?
A: On the database level of a M:M association, we use a join table to support it. Both of the primary models will each have a
1:M association with the join table. By using the has_many :through technique, we are able to create and indirect M:M association with the two primary models.

14)What are the two ways to support a M:M association at the ActiveRecord model level? Pros and cons of each approach?
A: 1) has_many :through requires an explicit join model and a join table, but it is more flexible and we can add additional attributes to the join table.
2) has_and_belongs_to_many does not require a join model but still requires a join table, but it is less flexible and we cannot add additional attributes to the join table.

Always use has_many :through, as has_and_belongs_to_many will be deprecated in the future.

15)Suppose we have a User model and a Group model, and we have a M:M association all set up. How do we associate the two?
A: We will need to use a join model(UserGroup) and table(user_groups) in this situation.

User model:

class User < ActiveRecord::Base
  has_many :user_groups, foreign_key: :user_id
  has_many :groups, through: :user_groups
end

User_Group model:

class UserGroup < ActiveRecord::Base
  belongs_to :user, foreign_key: :user_id
  belongs_to :group, foreign_key: :group_id
end

Group model:

class Group < ActiveRecord::Base
  has_many :user_groups, foreign_key: :group_id
  has_many :users, through: :user_groups
end
