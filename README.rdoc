== Getting Started

1. Make sure you have rails version 4. Type "rails -v" to make sure.
2. From this project directory, do "bundle install --without production"
3. To start the server "rails server".
4. Navigate your browser to localhost:3000.


== Setting up with Git

1. Instantiate this directory as a git repository with "git init".
2. Go to github.com, create a new repository, then follow instructions on how to add a remote repository that links to github.
3. Remember, you have to "git add" changes to ready it for a commit, then "git commit" to commit those changes locally, then "git push origin master" to push it to the remote "origin" repository, which is the previously created github.com repository.

== Deploying to Heroku

1. Download the Heroku Toolbelt.
2. Go to Heroku.com and register.
3. Issue "heroku login" to authenticate, with the credentials from previous step. Make sure it's a git repository, by issuing "git init", and also "git add", "git commit" your files.
4. Then "heroku create" to create this app on heroku. This command also adds a "heroku" remote repository that you can push to.
5. To deploy, issue "git push heroku master".
6. You may need to run migrations on heroku afterwards, with "heroku run rake db:migrate".
7. Other helpful heroku commands:
  - heroku logs
  - heroku logs -t
  - heroku rename
  - heroku restart
  - heroku run console
  - heroku help


#--------------------- ANSWERS TO WEEK 1 QUIZ 

1)Why do they call it a relational database?
A: Due to the tables within the database having associations to each other

2)What is SQL?
A: SQL(Structured Query Language) and it is used to manage operations of a relational database.

3)There are two predominant views into a relational database. What are they, and how are they different?
A: Data and Schema. Data view displays like a spreadsheet, Schema view shows us the column names and the value type of each column.

4)In a table, what do we call the column that serves as the main identifier for a row of data? We're looking for the general database term, not the column name.
A: Primary Key

5)What is a foreign key, and how is it used?
A: FK is the identifier that connects an association with the models involved. The FK is always on the "many" side and is always in an integer type.

6)At a high level, describe the ActiveRecord pattern. This has nothing to do with Rails, but the actual pattern that ActiveRecord uses to perform its ORM duties.
A: ActiveRecord is a way to access the database. A database table is related to a class. An object of that class is created as a row in the table. This object can have different attribute values shown as the columns in the table. We can create, retrieve,
update, and delete the object instances by altering the database table.

7)If there's an ActiveRecord model called "CrazyMonkey", what should the table name be?
A:"CrazyMonkey".tableize => crazy_monkeys

8)If I'm building a 1:M association between Project and Issue, what will the model associations and foreign key be?
A:  class Project < ActiveRecord::Base
      has_many :issues, foreign_key: :project_id
    end
    
    class Issue < ActiveRecord::Base
      belongs_to :project, foreign_key: :project_id
    end

project_id => fk

9)Given this code

class Zoo < ActiveRecord::Base
  has_many :animals
end

What do you expect the other model to be and what does database schema look like?

class Animal < ActiveRecord::Base
  belongs_to :zoo, foreign_key: :zoo_id
end

schema would contain zoos table, animals table, & fk would be :zoo_id

What are the methods that are now available to a zoo to call related to animals?
zoo.animals
zoo.animals.first
zoo.animals.each do |animal|
  #SOME_ACTION
end

How do I create an animal called "jumpster" in a zoo called "San Diego Zoo"?
Go into rails console and enter the following in different commands
zoo = Zoo.create(name: 'San Diego Zoo')
jumpster = Animal.create(name: "jumpster", zoo_id: 1)

10) What is mass assignment? What's the non-mass assignment way of setting values?
A: Mass assignment allows us to assign multiple values to attributes with only a single assignment operator

Mass Assignment:
$Post.new(title: 'My first post', topic: 'Life')
$Post.create(title: 'My first post', topic: 'Life')

Non-Mass Assignment:
post = Post.new
post.title = 'My first post'
post.topic = 'Life'

11)What does this code do? Animal.first
A: This will return the first row of data for the first Animal instance object in the animals table.

12)If I have a table called "animals" with columns called "name", and a model called Animal, how do I instantiate an animal object with name set to "Joe". Which methods makes sure it saves to the database?
A: 
$ animal = Animal.create(name: 'Joe') #=> Using "create" will hit the database and automatically saves it.
vs.
$ animal = Animal.new(name: 'Joe') #=> Using "new" will require you to use the save method afterwards to save it to the database.
$ animal.save

13)How does a M:M association work at the database level?
A: On the database level of a M:M association, we use a join table to support it. Both of the primary models will each have a
1:M association with the join table. By using the has_many :through technique, we are able to create and indirect M:M association with the two primary models.

14)What are the two ways to support a M:M association at the ActiveRecord model level? Pros and cons of each approach?
A: 1) has_many :through requires an explicit join model and a join table, but it is more flexible and we can add additional attributes to the join table.
2) has_and_belongs_to_many does not require a join model but still requires a join table, but it is less flexible and we cannot add additional attributes to the join table.

Always use has_many :through, as has_and_belongs_to_many will be deprecated in the future.

15)Suppose we have a User model and a Group model, and we have a M:M association all set up. How do we associate the two?
A: We will need to use a join model(UserGroup) and table(user_groups) in this situation.

User model:

class User < ActiveRecord::Base
  has_many :user_groups, foreign_key: :user_id
  has_many :groups, through: :user_groups
end

User_Group model:

class UserGroup < ActiveRecord::Base
  belongs_to :user, foreign_key: :user_id
  belongs_to :group, foreign_key: :group_id
end

Group model:

class Group < ActiveRecord::Base
  has_many :user_groups, foreign_key: :group_id
  has_many :users, through: :user_groups
end

#========================== Answers to Quiz 2

1) Name all the 7 (or 8) routes exposed by the resources keyword in the routes.rb file. Also name the 4 named routes, and how the request is routed to the controller/action.
A: 1. get '/posts' 2. get '/posts/object' 3. get '/posts/object/edit' 4. get '/posts/new' 5. post '/posts' 6. patch '/posts/objects' 7. put '/posts/object' 8. delete '/posts/object'

2) What is REST and how does it relate to the resources routes?
A: REST => REpresentational State Transfer, and it relies on using a stateless, client-server, cacheable communications protocol. In our case, most of the time
the HTTP protocol is used. RESTful applications use HTTP requests to create, retrieve, update, and delete data (CRUD operations). Thus, REST uses HTTP for all four of these actions
When we use resources routes, we are mapping the browser requests (HTTP verbs and URLs) to the controller actions of our app, allowing it to work seamlessly on the web.

3) What's the major difference between model backed and non-model backed form helpers?
A: The major difference is that model backed form helpers are tied to an object. There has to be a setter method, a virtual attribute or a column in the database, available for that object when using the model backed form helpers.

4) How does form_for know how to build the <form> element?
A: By convention, form_for creates a form based on a specific model object. We are able to create, edit, and update that object's attributes. 
A form can be created by passing form_for a string or symbol relating to the object we want to deal with.

<%= form_for @posts do |i| %>
  <%= f.label :title %>
  <%= f.text_field :title %>
<% end %>

5) What's the general pattern we use in the actions that handle submission of model-backed forms (ie, the create and update actions)?
A:

def create
  @post = Post.new(params.require(:post).permit(:url, :title, :description))
  if @post.save
    flash[:notice] = "Your post was saved."
    redirect_to posts_path
  else
    render :new
  end
end

def update
  @post = Post.find(params[:id])
  
  if @post.update(params.require(:post).permit(:url, :title, :description))
    flash[:notice] = "Your post was updated."
    redirect_to post_path(@post)
  else
    render :edit
  end
end

6) How exactly do Rails validations get triggered? Where are the errors saved? How do we show the validation messages on the user interface?
A: Rails validations are triggered when the data submissions try to hit the db. The errors are saved on the model object.
When there are validation errors, they are saved to the object.errors. We display the validation messages by referencing the object.errors.full_messages
method like below. By using the full_messages method, the errors are displayed in a readable sentence format.

7) What are Rails helpers?
A: Rails helpers allow us to consolidate our application's logic and formatting so we can properly display info in the views.
By declaring helper methods within the "application_helper.rb" file, we are able to use the methods in the views without
convoluting the views with logic code.

8) What are Rails partials?
A: They are a type of view that enable us to store and share common HTML files amongst all of the views. Partial files
are named with an underscore at the beginning like so: _errors.html.erb

9) When do we use partials vs helpers?
A: A partial is a view fragment with HTML code that is usually shared and used multiple times in view files. It should consist of code that is for presentation
purposes only. Opposite, while helpers also reduce code duplications, they are meant to be used when there is some logic to be processed within a view.
This will eliminate the views to be consumed by logic, and instead, the views can remain "pure" for presentation usages.

10) When do we use non-model backed forms?
A: You can use a non-model backed form when you want to create a form that is not tied to a model. We can think of a non-model backed form as
generating pure HTML rather than binding the form with a model object.
